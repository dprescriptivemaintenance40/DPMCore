// <auto-generated />
using System;
using DPM_ServerSide.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DPM.Migrations
{
    [DbContext(typeof(DPMDal))]
    [Migration("20201229205715_DPM_TestingDB")]
    partial class DPM_TestingDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DPM_ServerSide.Models.CompressorModel.ScrewCompressorModel.ScrewCompressorPredictionModel", b =>
                {
                    b.Property<int>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS2")
                        .HasColumnType("numeric");

                    b.Property<string>("Prediction")
                        .HasColumnType("text");

                    b.Property<decimal>("TD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS2")
                        .HasColumnType("numeric");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("PredictionId");

                    b.ToTable("screwcompressorpredictiontable");
                });

            modelBuilder.Entity("DPM_Testing.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("ContactUsId");

                    b.ToTable("contactus");
                });

            modelBuilder.Entity("DPM_Testing.Models.RegisterUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegisterUsers");
                });

            modelBuilder.Entity("DPM_Testing.Models.RegistrationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("registeruser");
                });

            modelBuilder.Entity("DPM_Testing.Models.ScrewCompressorConfigurationModel", b =>
                {
                    b.Property<int>("AddRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<float>("Alarm")
                        .HasColumnType("real");

                    b.Property<string>("Columns")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<float>("Trigger")
                        .HasColumnType("real");

                    b.HasKey("AddRuleId");

                    b.ToTable("addrulemodel");
                });

            modelBuilder.Entity("DPM_Testing.Models.ScrewCompressorTrainClassificationModel", b =>
                {
                    b.Property<int>("CompClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS2")
                        .HasColumnType("numeric");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("CompClassID");

                    b.ToTable("compressurewithclassification");
                });

            modelBuilder.Entity("DPM_Testing.Models.ScrewCompressorTrainModel", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PS2")
                        .HasColumnType("numeric");

                    b.Property<string>("ProcessingStage")
                        .HasColumnType("text");

                    b.Property<decimal>("TD1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TD2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TS2")
                        .HasColumnType("numeric");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("BatchId");

                    b.ToTable("compressuredetails");
                });
#pragma warning restore 612, 618
        }
    }
}
